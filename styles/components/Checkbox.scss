@use '../variables' as var;
@use '../mixins/base';
@use '../mixins/focus';
@use '../mixins/layout';

/**
 * A container element for a labeled checkbox.
 */
.Hyp-LabeledCheckbox {
  // Apply a pointer cursor here to make sure that the label text gets a pointer
  cursor: pointer;
  @include layout.row($align: center);
  @include layout.horizontal-spacing(2);
}

/**
 * A checkbox input field.
 *
 * Style <input.Hyp-Checkbox>'s appearance using an <svg> element.
 *
 * Style the input itself such that it is not visible to sighted users, and
 * instead use the SVG for checkbox appearance. The SVG and input are composited
 * such that users are still interacting with the input.
 *
 * See https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/
 *
 * The <svg> element should be contained within a <span> immediately following
 * (adjacent sibling to) the <input>:
 *
 * [<div.Hyp-LabeledCheckbox>]
 *   <input.Hyp-Checkbox type="checkbox" />
 *   <span> <!-- generated by SvgIcon -->
 *     <svg.hyp-svg-checkbox>
 *       <rect.hyp-svg-checkbox--background />
 *       <polyline.hyp-svg-checkbox--checkmark />
 *     </svg>
 *   </span>
 *   [<span>Label text</span>]
 * [</div>]
 */
.Hyp-Checkbox {
  // Apply a cursor here to make sure the SVG image gets a pointer
  cursor: pointer;
  // Style the checkbox such that it is not visible to sighted users but can
  // be interacted with via screen-reader or touch-screen-reader.
  position: absolute;
  // Leaving a 1em size here allows users with touch-screen-readers to find
  // and interact with the element.
  width: 1em;
  height: 1em;
  // Some screen readers won't read out elements with 0 opacity
  opacity: 0.00001;

  // Size and align the span containing the <svg>
  & + span {
    @include base.override {
      // The parent container is applying horizontal-spacing.
      // Don't add left-margin to this element.
      // The input element, which comes first, isn't actually
      // visible, so this (second) element should have no left-margin.
      margin-left: var.space(0);
    }
    & > svg {
      width: 1em;
      height: 1em;
      // Transition the checked/unchecked styling in the SVG
      * {
        transition: all 0.1s linear;
      }
    }
  }

  // Set focus styles on SVG when checkbox is focused
  &:focus {
    & + span > svg {
      @include focus.outline-rule;
    }

    // TODO polyfill/browser support
    &:not(:focus-visible) + span > svg {
      @include focus.outline--hide;
    }
  }

  // Unchecked styling
  &:not(:checked) + span {
    & .hyp-svg-checkbox--background {
      stroke: var.$color-grey-6;
    }
  }

  // Update the SVG styling when the checkbox is checked
  &:checked + span {
    & .hyp-svg-checkbox--background {
      fill: white;
      stroke: var.$color-grey-8;
    }

    & .hyp-svg-checkbox--checkmark {
      stroke: var.$color-grey-8;
    }
  }
}
