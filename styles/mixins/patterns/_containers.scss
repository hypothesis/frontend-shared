@use '../../variables' as var;

@use '../atoms';
@use '../layout';
@use '../themes';

$-border-radius: var.$border-radius;
$-color-background: var.$color-background;

/**
 * Patterns that are composites of multiple atomic utilities, but
 * are not standalone components.
 */

/**
 * Give an element a border, background color and internal vertical spacing
 */

// A content block, with default padding and vertical spacing between elements
@mixin block {
  @include layout.padding(5);
  @include layout.vertical-spacing;
}

@mixin frame {
  @include block;
  @include atoms.border;
  border-radius: $-border-radius;
  background-color: $-color-background;

  @include themes.theme('clean') {
    // A frame should not have any borders in the clean theme.
    border: none;
  }
}

/**
 * A frame with a shadow and (optional) shadow hover effect. Fills available
 * horizontal space.
 *
 * @param {boolean} [$with-hover] - Should this frame have a hover effect?
 */
@mixin card($with-hover: true) {
  @include frame;
  @include atoms.shadow;
  @if $with-hover {
    &:hover,
    &.is-focused {
      @include atoms.shadow($active: true);
    }
  }

  width: 100%;

  @include themes.theme('clean') {
    // A card should have no shadows at all in the clean theme.
    box-shadow: none;
  }
}

/**
 * A container that lays out a collection of actionsâ€”typically buttons. Default
 * to a row layout, but also available as `column`.
 *
 * @param {'row'|'column'} [$direction]
 */
@mixin actions($direction: row) {
  @if $direction == row {
    @include layout.row(right);
    @include layout.horizontal-spacing($size: 4);
  } @else {
    @include layout.column;
    @include layout.vertical-spacing($size: 3);
  }
}

/**
 * A modal container, with responsive positioning and sizing.
 *
 * A modal should contain one immediate-child element; in most cases, an
 * element that applies the dialog[1] pattern. Content within the dialog
 * (grandchild elements of modal) can be managed with `overflow` rules so as not
 * to exceed the size constraints of the modal within the viewport.
 *
 * Example structure follows:
 *
 * <modal>
 *   <dialog>
 *     <div /> <!-- dialog can contain any arbitrary content -->
 *     <div style="overflow: auto">
 *       This content will scroll vertically if it is too tall for the
 *       available space in the modal.
 *     </div>
 *     <div />
 *     ...
 *   </dialog>
 * </modal>
 *
 * [1]: The modal's immediate child need not specifically apply the dialog
 *      pattern, but any element that needs to manage overflow within the modal
 *      must be a grandchild of the modal container element.
 */
@mixin modal {
  // The modal container is positioned horizontally- and vertically-centered
  @include layout.fixed-centered;

  // This sizing applies to smaller viewports
  width: 90vw;
  max-width: 90vw;
  max-height: 90vh;

  // For viewports with more horizontal room, adjust width.
  // Set a reasonable min-width on the modal so it doesn't look too dinky,
  // and a max-width so it doesn't stretch too wide.
  @media screen and (min-width: 48rem) {
    width: auto;
    min-width: 28rem;
    max-width: 44rem; // default for older browsers
    max-width: min(44rem, 90vw);
  }

  // For viewports with more vertical room, adjust vertical positioning to
  // near the top of the viewport.
  @media screen and (min-height: 32rem) {
    top: 10vh;
    // Provide at least 10vh of space between bottom of modal and bottom of
    // viewport, or else the modal will look vertically mis-aligned
    // 100vh - 10vh top - 10vh bottom = 80vh
    max-height: 80vh;
    transform: translate(-50%, 0);
  }

  // Apply rules to the immediate child (likely a dialog) to allow for overflow
  // management in modal's grandchild elements.
  & > * {
    // A flex layout allows item children to overflow without defining an
    // absolute container height.
    // See https://www.codementor.io/@stephenbunch/how-to-make-a-scrollable-container-with-dynamic-height-using-flexbox-bkaunxewg
    @include layout.column;

    // These height rules are duplicative of the height rules on the modal,
    // but need to be applied to this element to be able to constrain
    // overflow in children. Height rules must be on an overflow-constrained
    // element's immediate parent.
    max-height: 90vh;

    @media screen and (min-height: 32rem) {
      max-height: 80vh;
    }
  }
}
