@use '../../variables' as var;

@use '../atoms';
@use '../base';
@use '../focus';
@use '../layout';

$-border-radius: var.$border-radius;

$-color-grey-0: var.$color-grey-0;
$-color-grey-6: var.$color-grey-6;
$-color-grey-8: var.$color-grey-8;
$-color-white: var.$color-white;

$-color-error: var.$color-error;

$-color-text: var.$color-text;
$-color-text--light: var.$color-text--light;
$-color-text--disabled: var.$color-text--disabled;

/**
 * General styling for a text-like input
 */
@mixin input {
  @include focus.outline($inset: true);
  @include atoms.border;
  @include layout.padding;

  background-color: $-color-grey-0;
  color: $-color-text;
  border-radius: $-border-radius;
}

/**
 * Styling for <input type="text" />. Includes a state class for errors.
 */
@mixin text-input {
  @include input;

  &.has-error,
  &.is-error {
    // Apply an error-colored inset outline.
    outline: none;
    @include focus.outline-rule($inset: true, $color: $-color-error);
  }

  &::placeholder {
    color: $-color-text--light;
  }

  &:focus {
    background-color: $-color-white;

    &::placeholder {
      // Note that this won't meet WCAG contrast requirements, so should only
      // be used when the placeholder is in effect "disabled" by focus
      color: $-color-text--disabled;
    }
  }
}

/**
 * A pattern for pairing a text input (left) with an icon-only button (right).
 *
 * Removes border radiuses where the two elements touch, and adds a border
 * to the button to align with the `input`.
 *
 * Sample usage:
 *  <div.hyp-text-input-with-button />
 *   <input.hyp-text-input />
 *   <button.hyp-IconButton />
 *  </div>
 */
@mixin text-input-with-button {
  @include layout.row;
  // Make the paired input and button fill the available space
  width: 100%;
  input {
    @include text-input;
    flex-grow: 1;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  button {
    @include atoms.border;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    border-left: 0;
  }
}

/**
 * Style a <label> element that wraps around its input, e.g.
 *
 * <label>
 *  <input type="checkbox" />
 *  <span>I am a label</span>
 * </label>
 */
@mixin label {
  // Apply a pointer cursor here to make sure that the label text gets a pointer
  cursor: pointer;
  @include layout.row($align: center);
  @include layout.horizontal-spacing(2);
}

/**
 * A checkbox input field.
 *
 * Style appearance of <input[type="checkbox"]> using an <svg> element.
 *
 * Style the input itself such that it is not visible to sighted users, and
 * instead use the SVG for checkbox appearance. The SVG and input are composited
 * such that users are still interacting with the input.
 *
 * See https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/
 *
 * The <svg> element should be contained within a <span> immediately following
 * (adjacent sibling to) the <input>:
 *
 *   <input class="hyp-checkbox" type="checkbox" />
 *   <span> <!-- generated by SvgIcon -->
 *     <svg.hyp-svg-checkbox>
 *       <rect.hyp-svg-checkbox--background />
 *       <polyline.hyp-svg-checkbox--checkmark />
 *     </svg>
 *   </span>
 */
@mixin checkbox {
  // Apply a cursor here to make sure the SVG image gets a pointer
  cursor: pointer;
  // Style the checkbox such that it is not visible to sighted users but can
  // be interacted with via screen-reader or touch-screen-reader.
  position: absolute;
  // Leaving a 1em size here allows users with touch-screen-readers to find
  // and interact with the element.
  width: 1em;
  height: 1em;
  // Some screen readers won't read out elements with 0 opacity
  opacity: 0.00001;

  // Size and align the sibling span containing the <svg>
  & + span {
    @include base.override {
      // The parent container is applying horizontal-spacing.
      // Don't add left-margin to this element.
      // The input element, which comes first, isn't actually
      // visible, so this (second) element should have no left-margin.
      margin-left: var.space(0);
    }
    & > svg {
      width: 1em;
      height: 1em;
      // Transition the checked/unchecked styling in the SVG
      * {
        transition: all 0.1s linear;
      }
    }
  }

  // Set focus styles on SVG when checkbox is focused
  &:focus {
    & + span > svg {
      @include focus.outline-rule;
    }

    &:not(:focus-visible) + span > svg {
      @include focus.outline--hide;
    }
  }

  // Unchecked styling
  &:not(:checked) + span {
    & .hyp-svg-checkbox--background {
      stroke: $-color-grey-6;
    }
  }

  // Update the SVG styling when the checkbox is checked
  &:checked + span {
    & .hyp-svg-checkbox--background {
      fill: $-color-white;
      stroke: $-color-grey-8;
    }

    & .hyp-svg-checkbox--checkmark {
      stroke: $-color-grey-8;
    }
  }
}
