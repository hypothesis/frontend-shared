@use '../variables' as var;

$-color-overlay: var.$color-overlay;

/**
 * Abstract mixin for establishing basic flex container. External users should
 * use `row` or `column` as needed. Default values here reflect default CSS
 * values for flex rules.
 *
 * @param {string} $direction [row] - value for flex-direction (row or column).
 * @param {string} $justify [flex-start] - How to align contents on main axis.
 *                                    Accepts and maps special value of 'right'
 *                                   (roughly analogous to horizontal alignment)
 * @param {string} $align [stretch] - How to align contents on cross axis.
 *                                    (roughly analogous to vertical alignment)
 */
@mixin flex($direction: row, $justify: flex-start, $align: stretch) {
  display: flex;
  flex-direction: $direction;

  @if $justify == right {
    justify-content: flex-end;
  } @else {
    justify-content: $justify;
  }
  align-items: $align;
}

/**
 * Establish a column (flex-direction: column) flex container.
 *
 * @param {string} $justify [flex-start] - How to justify flex contents
 * @param {string} $align [stretch] - How to align flex contents
 */
@mixin column($justify: flex-start, $align: stretch) {
  @include flex(column, $justify, $align);
}

/**
 * Establish a row (flex-direction: column) flex container.
 *
 * @param {string} $justify [flex-start] - How to justify flex contents
 * @param {string} $align [stretch] - How to align flex contents
 */
@mixin row($justify: flex-start, $align: stretch) {
  @include flex(row, $justify, $align);
}

/**
 * Put `$size` of vertical space between all immediate children.
 *
 * @param {length} [$size] - Relative size of spacing, 0 - 9. Default 5
 */
@mixin vertical-spacing($size: 5) {
  & > :not(:first-child) {
    margin-top: var.space($size);
  }
}

/**
 * Put `$size` of horizontal space between all immediate children.
 *
 * @param {length} [$size] - Relative size of spacing, 0 - 9. Default 3
 */
@mixin horizontal-spacing($size: 3) {
  & > :not(:first-child) {
    margin-left: var.space($size);
  }
}

/**
 * Position an element vertically and horizontally within the viewport
 */
@mixin fixed-centered {
  z-index: 20;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/**
 * Semi-opaque overlay, full-viewport
 */
@mixin overlay {
  z-index: 10;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background-color: $-color-overlay;
}

// A content block, with default padding and vertical spacing between elements
@mixin block {
  padding: var.space(); // TODO: padding and mixins
  @include vertical-spacing;
}
